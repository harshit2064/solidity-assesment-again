//SPDX-License-Identifier: MIT

pragma solidity =0.8.18;

contract Token {

    string _name;

    string _symbol;

    uint256 _totalSupply;

    mapping(address => uint256) balances;

    mapping (address => mapping (address => uint256 )) allowance;

    event Mint(address, uint256);

    event Burn(address, uint256);

    constructor(string memory __name, string memory __symbol) {
        _name = __name;
        _symbol = __symbol;
    }

    function mint(address _to, uint256 _amount) external {
        require(_to!=address(0), "Cannot mint to zero address.");
        balances[_to]+= _amount;
        _totalSupply += _amount;
        emit Mint(_to,_amount);
    }

    function burn(address _from, uint256 _amount) external {
        require(_from!=address(0),"Cannot burn from zero address");
        require(balances[_from] >= _amount, "Cannot burn more than balance.");
        balances[_from] -= _amount;
        _totalSupply -= _amount;
        emit Burn(_from, _amount);
    }

    function balanceOf(address _address) public view returns(uint256) {
        return balances[_address];
    }

    function name() public view returns(string memory) {
        return _name;
    }

    function symbol() public view returns(string memory) {
        return _symbol;
    }

    function totalSupply() public view returns(uint256) {
        return _totalSupply;
    }


}
